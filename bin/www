#!/usr/bin/env node

// node 16.14.2. 2022.04.01: 17.8.0
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
const https = require ('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '443');
 var httpRedirectPort = normalizePort(process.env.PORT_HTTP || '80');

if (process.env.NODE_ENV === "production") {
  app.set('port', port);
} else {
  app.set('port', httpRedirectPort);
}

/**
 * Create HTTPS server.
 */

 if (process.env.NODE_ENV === "production") {
  server = https.createServer({
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem'),
  passphrase: 'fingermen'
  
  }, app);
  
  
  var httpsRedirect = http.createServer((req, res) => {
    res.writeHead(301, {"Location": "https://" + req.headers['host'] + req.url});
    res.end();
  });
  
  /**
   * Create HTTP server to redirect all requests to HTTPS server.
   */
  
  httpsRedirect.listen(httpRedirectPort);
  httpsRedirect.on('error', onError);
  httpsRedirect.on('listening', onListening);
  
  /**
   * Listen on provided port, on all network interfaces.
   */
} else {
  server = http.createServer(app);
};

if (process.env.NODE_ENV === "production") {
  server.listen(port);
} else {
  server.listen(httpRedirectPort);
}
//server.listen(port);
console.log('https: listening on port ', port)
console.log('http: listening on port ', httpRedirectPort)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind);
}

