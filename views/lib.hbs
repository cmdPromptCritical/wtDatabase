{{!-- used as a viewer for wt documents --}}

<div id="breadcrumbsBar" class="bg-light border-bottom box-shadow">
  <div class="container">
    <div class="mt-1 col-12 col-md-12 col-xl-10" id='breadcrumbsBarCentering'>
        <h4 class="font-weight-bold breadcrumsElement breadcrumbsPath"><small>{{searchResult.0.cat1}} / {{searchResult.0.cat2}} / {{searchResult.0.cat3}} / pg{{searchResult.0.pg}}</small></h4>

        <div class="breadcrumsElement settings float-right">
            <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Layout
                </button>
                <div class="dropdown-menu dropdown-menu-right" id="pleb">
                    <button class="dropdown-item" id='layoutBtn-pdf' type="button" onclick="javascript:function() {window.location = 'https://google.ca';}">PDF</button>
                    <button class="dropdown-item" id="layoutBtn-1col" type="button" >1 Column</button>
                    <button class="dropdown-item" id='layoutBtn-2col' type="button" >2 Columns</button>
                </div>
            </div>
        </div>
    </div>
  </div>
</div>
<div class="container">
  
  <div class="col-12 col-md-12 col-xl-10" id='body'>
    <div id="docViewer">
        {{#if searchResult.0.bodyhtml}}
            {{{searchResult.0.bodyhtml}}}
        {{/if}}
        {{#if searchResult.0.bodyhtml2col}}
            {{{searchResult.0.bodyhtml2col}}}
        {{/if}}
        {{#if searchResult.0.bodypdf}}
            <object data="/pub/{{searchResult.0.bodypdf}}" type="application/pdf" width="100%" height="900px">
            <p>This view is optimized for large screens and desktops. <a href="/pub/{{searchResult.0.bodypdf}}">Click here to view PDF</a>.</p>
            </object>
        {{/if}}
    </div>

  </div>
</div>
<script>
    // gets all url parameters , returns an object, check out: https://www.sitepoint.com/get-url-parameters-with-javascript/
    // retrieve data like: getAllUrlParams().q 
    function getAllUrlParams(url) {

    // get query string from url (optional) or window
    var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

    // we'll store the parameters here
    var obj = {};

    // if query string exists
    if (queryString) {

        // stuff after # is not part of query string, so get rid of it
        queryString = queryString.split('#')[0];

        // split our query string into its component parts
        var arr = queryString.split('&');

        for (var i = 0; i < arr.length; i++) {
        // separate the keys and the values
        var a = arr[i].split('=');

        // set parameter name and value (use 'true' if empty)
        var paramName = a[0];
        var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];

        // (optional) keep case consistent
        paramName = paramName.toLowerCase();
        if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();

        // if the paramName ends with square brackets, e.g. colors[] or colors[2]
        if (paramName.match(/\[(\d+)?\]$/)) {

            // create key if it doesn't exist
            var key = paramName.replace(/\[(\d+)?\]/, '');
            if (!obj[key]) obj[key] = [];

            // if it's an indexed array e.g. colors[2]
            if (paramName.match(/\[\d+\]$/)) {
            // get the index value and add the entry at the appropriate position
            var index = /\[(\d+)\]/.exec(paramName)[1];
            obj[key][index] = paramValue;
            } else {
            // otherwise add the value to the end of the array
            obj[key].push(paramValue);
            }
        } else {
            // we're dealing with a string
            if (!obj[paramName]) {
            // if it doesn't exist, create property
            obj[paramName] = paramValue;
            } else if (obj[paramName] && typeof obj[paramName] === 'string'){
            // if property does exist and it's a string, convert it to an array
            obj[paramName] = [obj[paramName]];
            obj[paramName].push(paramValue);
            } else {
            // otherwise add the property
            obj[paramName].push(paramValue);
            }
        }
        }
    }

    return obj;
    }
    function highlight(text) {
        var tmpregexPhrase = ''; //holds phrase to highlight keywords
        //clean parentheses and other odd characters
        query = decodeURIComponent(text);      //converts to readable text
        query = query.split('+')                //splits into individual words
        
        //attempts to highlight using markio
        var context = document.querySelector("#docViewer")
        var instance = new Mark(context);

        //iterates through each search word
        for(let i = 0; i < query.length; i++){
            query[i] = query[i].replace(/\W/g, '');
            if(i == 0) tmpregexPhrase += '[a-z]*' + query[i] + '[a-z]*';
            if(i > 0 ) tmpregexPhrase += '|[a-z]*' + query[i] + '[a-z]*';
        }
        tmpregexPhrase += ''
        var regexPhrase = new RegExp(tmpregexPhrase)
        instance.markRegExp(regexPhrase);
        
    }
    function addquerytoSearchbox(query) {
        // adds query to searchbox so that it is not empty
        var params = query
        var x = document.getElementById('searchbarHeader');
        query = decodeURIComponent(query);      //converts to readable text
        query = query.replace(/[^a-zA-z0-9 ]/g, ' ');
        // if query is defined
        if(params != undefined) x.value = query;
         
    }
    function addSearchRestoLayoutUrls() {
        //saw that some urls (the layout options) needed search results query added to url
        //this does that after loading webpage
        //var url = document.location //full url with params
        var urlnoparams = window.location.href.split('?')[0];
        const query2col = new URLSearchParams(window.location.search);
        const query1col = new URLSearchParams(window.location.search);
        const querypdf = new URLSearchParams(window.location.search);
        query2col.set("v", "html");
        query1col.set("v", "txt");
        querypdf.set("v", "pdf");

        //updates links if there are any parameters
        document.getElementById('layoutBtn-2col').addEventListener('click',function() {window.location = urlnoparams + '?' + query2col;})
        document.getElementById('layoutBtn-1col').addEventListener('click',function() {window.location = urlnoparams + '?' + query1col;})
        document.getElementById('layoutBtn-pdf').addEventListener('click',function() {window.location = urlnoparams + '?' + querypdf;})
    }
    let urlParams = getAllUrlParams(window.location.href);
    console.log(window.location)
    
    document.addEventListener('DOMContentLoaded', highlight(urlParams.q), false);
    document.addEventListener('DOMContentLoaded', addquerytoSearchbox(urlParams.q), false);
    document.addEventListener('DOMContentLoaded', addSearchRestoLayoutUrls(), false);
</script>